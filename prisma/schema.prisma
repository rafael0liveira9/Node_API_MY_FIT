generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model client {
  id                                                            Int                   @id @default(autoincrement())
  name                                                          String                @db.VarChar(100)
  nick                                                          String?               @db.VarChar(100)
  phone                                                         String?               @db.VarChar(100)
  photo                                                         String?               @db.VarChar(255)
  backgroundImage                                               String?               @db.VarChar(255)
  description                                                   String?               @db.VarChar(255)
  objective                                                     String?               @db.VarChar(255)
  instagram                                                     String?               @db.VarChar(255)
  createdAt                                                     DateTime              @default(now()) @db.Timestamp(0)
  updatedAt                                                     DateTime?             @db.Timestamp(0)
  deletedAt                                                     DateTime?             @db.Timestamp(0)
  document                                                      String?               @db.VarChar(100)
  cref                                                          String?               @db.VarChar(100)
  situation                                                     Int                   @default(1) @db.TinyInt
  gender                                                        Int?                  @db.TinyInt
  birthDate                                                     DateTime?             @db.Timestamp(0)
  userType                                                      Int                   @default(2)
  bannedUntil                                                   DateTime?             @db.DateTime(0)
  type                                                          type                  @relation(fields: [userType], references: [id], onUpdate: Restrict, map: "client_type_FK")
  exercise                                                      exercise[]
  forbiddenAlerts                                               forbiddenAlerts[]
  friendship_friendship_senderToclient                          friendship[]          @relation("friendship_senderToclient")
  friendship_friendship_friendToclient                          friendship[]          @relation("friendship_friendToclient")
  posts                                                         posts[]
  relationship_relationship_clientToclient                      relationship[]        @relation("relationship_clientToclient")
  relationship_relationship_responsibleToclient                 relationship[]        @relation("relationship_responsibleToclient")
  serieExecution                                                serieExecution[]
  shop                                                          shop[]
  training                                                      training[]
  trainingAssignments_trainingAssignments_clientIdToclient      trainingAssignments[] @relation("trainingAssignments_clientIdToclient")
  trainingAssignments_trainingAssignments_responsibleIdToclient trainingAssignments[] @relation("trainingAssignments_responsibleIdToclient")
  trainingExecution                                             trainingExecution[]
  user                                                          user[]

  @@index([userType], map: "client_type_FK")
}

model type {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  situation   Int      @default(1) @db.TinyInt
  client      client[]
  user        user[]
}

model user {
  id            Int       @id @default(autoincrement())
  email         String    @db.VarChar(100)
  password      String    @db.VarChar(255)
  tip           String?   @db.VarChar(255)
  reply         String?   @db.VarChar(255)
  questionId    Int?
  clientId      Int
  typeId        Int?
  lastPaymentId Int?
  createdAt     DateTime  @default(now()) @db.Timestamp(0)
  updatedAt     DateTime? @db.Timestamp(0)
  deletedAt     DateTime? @db.Timestamp(0)
  situation     Int       @default(1) @db.TinyInt
  socialCode    String?   @db.VarChar(50)
  inputCode     String?   @db.Char(10)
  client        client    @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "user_client_FK")
  questions     question? @relation(fields: [questionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_questions_FK")
  type          type?     @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_type_FK")

  @@index([questionId], map: "user_questions_FK")
  @@index([typeId], map: "user_type_FK")
  @@index([clientId], map: "user_client_FK")
}

model question {
  id        Int    @id @default(autoincrement())
  question  String @db.VarChar(255)
  situation Int    @default(1) @db.TinyInt
  user      user[]
}

model exercise {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(100)
  description   String?      @db.VarChar(100)
  image         String?      @db.VarChar(255)
  animation     String?      @db.VarChar(255)
  video         String?      @db.VarChar(255)
  createdAt     DateTime     @default(now()) @db.Timestamp(0)
  updatedAt     DateTime?    @db.Timestamp(0)
  deletedAt     DateTime?    @db.Timestamp(0)
  situation     Int          @default(1) @db.TinyInt
  authorId      Int?
  groupMuscleId Int?
  user          client?      @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "exercise_user_FK")
  muscleGroup   muscleGroup? @relation(fields: [groupMuscleId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "exercise_muscleGroup_FK")
  series        series[]

  @@index([groupMuscleId], map: "exercise_muscleGroup_FK")
  @@index([authorId], map: "exercise_client_FK")
}

model series {
  id              Int              @id @default(autoincrement())
  trainingId      Int?
  exerciseId      Int?
  amount          Int?             @default(3) @db.TinyInt
  isometry        Int?             @default(0) @db.TinyInt
  bisetExerciseId Int?
  difficulty      String?          @default("[\"0\", \"0\", \"0\"]") @db.VarChar(255)
  situation       Int              @default(1) @db.TinyInt
  createdAt       DateTime?        @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?        @db.Timestamp(0)
  deletedAt       DateTime?        @db.Timestamp(0)
  interval        Int?
  addSet          Int?             @default(0) @db.TinyInt
  repetitions     String?          @default("[\"15\", \"15\", \"15\"]") @db.VarChar(255)
  observations    String?          @db.VarChar(255)
  personalRecord  String?          @db.VarChar(100)
  serieExecution  serieExecution[]
  exercise        exercise?        @relation(fields: [exerciseId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "series_exercise_FK")
  training        training?        @relation(fields: [trainingId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "series_training_FK")

  @@index([exerciseId], map: "series_exercise_FK")
  @@index([trainingId], map: "series_training_FK")
}

model training {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  description         String?               @db.VarChar(255)
  level               Int                   @default(1) @db.TinyInt
  authorId            Int
  url                 String?               @db.VarChar(255)
  createdAt           DateTime              @default(now()) @db.Timestamp(0)
  updatedAt           DateTime?             @db.Timestamp(0)
  deletedAt           DateTime?             @db.Timestamp(0)
  situation           Int                   @default(1) @db.TinyInt
  packageId           Int?
  photo               String?               @db.VarChar(255)
  series              series[]
  shop                shop[]
  user                client                @relation(fields: [authorId], references: [id], onUpdate: Restrict, map: "training_user_FK")
  Renamedpackage      Renamedpackage?       @relation(fields: [packageId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "training_package_FK")
  trainingAssignments trainingAssignments[]
  trainingEvaluations trainingEvaluations[]
  trainingExecution   trainingExecution[]

  @@index([authorId], map: "training_client_FK")
  @@index([packageId], map: "training_package_FK")
}

model muscleGroup {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?    @db.VarChar(255)
  situation   Int        @default(1) @db.TinyInt
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?  @db.Timestamp(0)
  deletedAt   DateTime?  @db.Timestamp(0)
  color       String?    @db.VarChar(100)
  exercise    exercise[]
}

model trainingAssignments {
  id                                               Int       @id @default(autoincrement())
  clientId                                         Int
  trainingId                                       Int
  responsibleId                                    Int?
  situation                                        Int       @default(1) @db.TinyInt
  expirationDate                                   DateTime? @db.DateTime(0)
  createdAt                                        DateTime? @default(now()) @db.DateTime(0)
  updatedAt                                        DateTime? @db.DateTime(0)
  deletedAt                                        DateTime? @db.DateTime(0)
  CompanyResposibleId                              Int?
  maxExecutions                                    Int?
  client_trainingAssignments_clientIdToclient      client    @relation("trainingAssignments_clientIdToclient", fields: [clientId], references: [id], onUpdate: Restrict, map: "trainingAssignments_client_FK")
  client_trainingAssignments_responsibleIdToclient client?   @relation("trainingAssignments_responsibleIdToclient", fields: [responsibleId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "trainingAssignments_client_FK_1")
  training                                         training  @relation(fields: [trainingId], references: [id], onUpdate: Restrict, map: "trainingAssignments_training_FK")

  @@index([clientId], map: "trainingAssignments_client_FK")
  @@index([responsibleId], map: "trainingAssignments_client_FK_1")
  @@index([trainingId], map: "trainingAssignments_training_FK")
}

model serieExecution {
  id                Int                @id @default(autoincrement())
  exerciseId        Int?
  clientId          Int?
  executionId       Int?
  difficulty        String?            @db.VarChar(255)
  client            client?            @relation(fields: [clientId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "exerciseExecution_client_FK")
  trainingExecution trainingExecution? @relation(fields: [executionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "exerciseExecution_trainingExecution_FK")
  exercise          series?            @relation(fields: [exerciseId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "exerciseExecution_exercise_FK")

  @@index([clientId], map: "exerciseExecution_client_FK")
  @@index([executionId], map: "exerciseExecution_trainingExecution_FK")
  @@index([exerciseId], map: "serieExecution_series_FK")
}

model trainingExecution {
  id             Int              @id @default(autoincrement())
  trainingId     Int?
  clientId       Int?
  evaluation     Int?
  observation    String?          @db.VarChar(100)
  startAt        DateTime?        @db.DateTime(0)
  endAt          DateTime?        @db.DateTime(0)
  serieExecution serieExecution[]
  client         client?          @relation(fields: [clientId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "trainingExecution_client_FK")
  training       training?        @relation(fields: [trainingId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "trainingExecution_training_FK")

  @@index([clientId], map: "trainingExecution_client_FK")
  @@index([trainingId], map: "trainingExecution_training_FK")
}

model trainingEvaluations {
  id          Int       @id @default(autoincrement())
  trainingId  Int?
  evaluation  Int?
  observation String?   @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  situation   Int?      @default(1) @db.TinyInt
  clientId    Int?
  updatedAt   DateTime? @db.DateTime(0)
  training    training? @relation(fields: [trainingId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "trainingEvaluations_training_FK")

  @@index([trainingId], map: "trainingEvaluations_training_FK")
}

model posts {
  id              Int               @id @default(autoincrement())
  title           String?           @db.VarChar(100)
  description     String?           @db.VarChar(255)
  image           String?           @db.VarChar(100)
  video           String?           @db.VarChar(100)
  authorId        Int?
  createdAt       DateTime?         @default(now()) @db.DateTime(0)
  updatedAt       DateTime?         @db.DateTime(0)
  situation       Int?              @default(1) @db.TinyInt
  type            Int?              @default(1) @db.TinyInt
  forbiddenAlerts forbiddenAlerts[]
  client          client?           @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "posts_client_FK")

  @@index([authorId], map: "posts_client_FK")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model forbiddenAlerts {
  id            Int       @id @default(autoincrement())
  clientId      Int?
  text          String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @db.DateTime(0)
  status        String    @default("1") @db.VarChar(100)
  postId        Int?
  postCommentId Int?
  updatedText   String?   @db.VarChar(255)
  updatedAt     DateTime? @db.DateTime(0)
  client        client?   @relation(fields: [clientId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "forbiddenAlerts_client_FK")
  posts         posts?    @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "forbiddenAlerts_posts_FK")

  @@index([clientId], map: "forbiddenAlerts_client_FK")
  @@index([postId], map: "forbiddenAlerts_posts_FK")
}

model faq {
  id        Int    @id @default(autoincrement())
  question  String @db.VarChar(100)
  answer    String @db.Text
  situation Int    @default(1) @db.TinyInt
}

model shop {
  id             Int             @id @default(autoincrement())
  packageId      Int?
  trainingId     Int?
  value          Float?
  discount       Float?
  couponId       Int?
  situation      Int             @default(1) @db.TinyInt
  expirationDate DateTime?       @db.DateTime(0)
  sellerId       Int
  client         client          @relation(fields: [sellerId], references: [id], onUpdate: Restrict, map: "shop_client_FK")
  Renamedpackage Renamedpackage? @relation(fields: [packageId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "shop_package_FK")
  training       training?       @relation(fields: [trainingId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "shop_training_FK")

  @@index([trainingId], map: "shop_training_FK")
  @@index([packageId], map: "shop_package_FK")
  @@index([sellerId], map: "shop_client_FK")
}

/// This model has been renamed to 'Renamedpackage' during introspection, because the original name 'package' is reserved.
model Renamedpackage {
  id       Int        @id @default(autoincrement())
  shop     shop[]
  training training[]

  @@map("package")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model friendship {
  id                               Int       @id @default(autoincrement())
  sender                           Int
  friend                           Int
  accept                           Int       @default(0) @db.TinyInt
  createdAt                        DateTime  @default(now()) @db.DateTime(0)
  updatedAt                        DateTime? @db.DateTime(0)
  client_friendship_senderToclient client    @relation("friendship_senderToclient", fields: [sender], references: [id], onUpdate: Restrict, map: "friendship_client_FK")
  client_friendship_friendToclient client    @relation("friendship_friendToclient", fields: [friend], references: [id], onUpdate: Restrict, map: "friendship_client_FK_1")

  @@index([sender], map: "friendship_client_FK")
  @@index([friend], map: "friendship_client_FK_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model relationship {
  id                                      Int       @id @default(autoincrement())
  client                                  Int
  responsible                             Int
  accept                                  Int       @default(0) @db.TinyInt
  createdAt                               DateTime  @default(now()) @db.DateTime(0)
  updatedAt                               DateTime? @db.DateTime(0)
  client_relationship_clientToclient      client    @relation("relationship_clientToclient", fields: [client], references: [id], onUpdate: Restrict, map: "relationship_client_FK")
  client_relationship_responsibleToclient client    @relation("relationship_responsibleToclient", fields: [responsible], references: [id], onUpdate: Restrict, map: "relationship_client_FK_1")

  @@index([client], map: "relationship_client_FK")
  @@index([responsible], map: "relationship_client_FK_1")
}
